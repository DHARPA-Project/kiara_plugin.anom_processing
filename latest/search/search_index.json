{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara plugin: anom_processing \u00b6 This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara . Description \u00b6 anom_processing Package content \u00b6 module_types \u00b6 anom_processing.example : A very simple example module; concatenate two strings. operations \u00b6 anom_processing.example : A very simple example module; concatenate two strings. Links \u00b6 Documentation: https://DHARPA-Project.github.io/kiara_plugin.anom_processing Code: https://github.com/DHARPA-Project/kiara_plugin.anom_processing","title":"Home"},{"location":"#kiara-plugin-anom_processing","text":"This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara .","title":"kiara plugin: anom_processing"},{"location":"#description","text":"anom_processing","title":"Description"},{"location":"#package-content","text":"","title":"Package content"},{"location":"#module_types","text":"anom_processing.example : A very simple example module; concatenate two strings.","title":"module_types"},{"location":"#operations","text":"anom_processing.example : A very simple example module; concatenate two strings.","title":"operations"},{"location":"#links","text":"Documentation: https://DHARPA-Project.github.io/kiara_plugin.anom_processing Code: https://github.com/DHARPA-Project/kiara_plugin.anom_processing","title":"Links"},{"location":"SUMMARY/","text":"Home Package contents Usage Development API reference","title":"SUMMARY"},{"location":"development/","text":"Development \u00b6 Prepare development environment \u00b6 Using conda (recommended) \u00b6 conda create -n anom_processing python=3.9 conda activate anom_processing conda install -c conda-forge mamba # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below mamba install -c conda-forge -c dharpa kiara mamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular # optional, adjust which plugin packages you depend on, those two are quite common Using Python venv \u00b6 Later, alligator. Check out the source code \u00b6 First, fork the kiara_plugin.anom_processing repository into your personal Github account. Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.anom_processing.git) to clone the repository locally: https://github.com/<YOUR_FORKED_GITHUB_ID>/kiara_plugin.anom_processing Install the kiara plugin package into it \u00b6 cd kiara_plugin.anom_processing pip install -e '.[all_dev]' Here we use the -e option for the pip install command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used. We also install a few additional requirements (the [all_dev] part in the command above) that are not strictly necessary for kiara itself, or this package, but help with various development-related tasks. Install some pre-commit check tooling (optional) \u00b6 This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a git commit in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes. pre-commit install pre-commit install --hook-type commit-msg In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/ Run kiara \u00b6 To check if everything works as expected and you can start adding/changing code in this repository, run any kiara command: kiara operation list -t anom_processing If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#prepare-development-environment","text":"","title":"Prepare development environment"},{"location":"development/#using-conda-recommended","text":"conda create -n anom_processing python=3.9 conda activate anom_processing conda install -c conda-forge mamba # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below mamba install -c conda-forge -c dharpa kiara mamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular # optional, adjust which plugin packages you depend on, those two are quite common","title":"Using conda (recommended)"},{"location":"development/#using-python-venv","text":"Later, alligator.","title":"Using Python venv"},{"location":"development/#check-out-the-source-code","text":"First, fork the kiara_plugin.anom_processing repository into your personal Github account. Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.anom_processing.git) to clone the repository locally: https://github.com/<YOUR_FORKED_GITHUB_ID>/kiara_plugin.anom_processing","title":"Check out the source code"},{"location":"development/#install-the-kiara-plugin-package-into-it","text":"cd kiara_plugin.anom_processing pip install -e '.[all_dev]' Here we use the -e option for the pip install command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used. We also install a few additional requirements (the [all_dev] part in the command above) that are not strictly necessary for kiara itself, or this package, but help with various development-related tasks.","title":"Install the kiara plugin package into it"},{"location":"development/#install-some-pre-commit-check-tooling-optional","text":"This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a git commit in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes. pre-commit install pre-commit install --hook-type commit-msg In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/","title":"Install some pre-commit check tooling (optional)"},{"location":"development/#run-kiara","text":"To check if everything works as expected and you can start adding/changing code in this repository, run any kiara command: kiara operation list -t anom_processing If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.","title":"Run kiara"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"info/SUMMARY/","text":"module_types operations","title":"SUMMARY"},{"location":"info/module_types/","text":"anom_processing.example \u00b6 type_name anom_processing.example The registered name for this item type. documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: * the (optional) configuration class *: must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModule.get_config_value] method * the inputs description *: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value * the outputs description *: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value * the process method *: this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Documentation for the item. authors Mariella De Crouy ( mariella.decrouychanel@uni.lu ) Information about authorship for the item. context tags anom_processing labels package: kiara_plugin.anom_processing references source_repo : The module package git repository. documentation : The url for the module package documentation. Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name ExampleModule The name of the Python class. python_module_name kiara_plugin.anom_processing.modules The name of the Python module this class lives in. full_name kiara_plugin.anom_processing.modules.ExampleModule The full class namespace. The python class that implements this module type. process_src def process(self, inputs: ValueMap, outputs: ValueMap) -> None: separator = self.get_config_value(\"separator\") text_1 = inputs.get_value_data(\"text_1\") text_2 = inputs.get_value_data(\"text_2\") result = text_1 + separator + text_2 outputs.set_value(\"text\", result) The source code of the process method of the module.","title":"module_types"},{"location":"info/module_types/#kiara_info.module_types.anom_processing.example","text":"type_name anom_processing.example The registered name for this item type. documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: * the (optional) configuration class *: must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModule.get_config_value] method * the inputs description *: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value * the outputs description *: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value * the process method *: this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Documentation for the item. authors Mariella De Crouy ( mariella.decrouychanel@uni.lu ) Information about authorship for the item. context tags anom_processing labels package: kiara_plugin.anom_processing references source_repo : The module package git repository. documentation : The url for the module package documentation. Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name ExampleModule The name of the Python class. python_module_name kiara_plugin.anom_processing.modules The name of the Python module this class lives in. full_name kiara_plugin.anom_processing.modules.ExampleModule The full class namespace. The python class that implements this module type. process_src def process(self, inputs: ValueMap, outputs: ValueMap) -> None: separator = self.get_config_value(\"separator\") text_1 = inputs.get_value_data(\"text_1\") text_2 = inputs.get_value_data(\"text_2\") result = text_1 + separator + text_2 outputs.set_value(\"text\", result) The source code of the process method of the module.","title":"anom_processing.example"},{"location":"info/operations/","text":"anom_processing.example \u00b6 Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModu\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Author(s) Mariella De Crouy mariella.decrouychanel@uni.lu Context Tags anom_processing Labels package : kiara_plugin.anom_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Inputs field name type desc\u2026 Req\u2026 Defa\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text_ stri\u2026 The yes -- no 1 first defa\u2026 text. -- text_ stri\u2026 The yes -- no 2 seco\u2026 defa\u2026 text. -- Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text string The concatenated text.","title":"operations"},{"location":"info/operations/#kiara_info.operations.anom_processing.example","text":"Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [ KiaraModule ][kiara.modules.KiaraModule]: \u2022 the (optional) configuration class : must inherit from [ KiaraModuleConfig ][kiara.modules.KiaraModuleConfig], and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the [ self.get_config_value(key) ][kiara.modules.KiaraModu\u2026 method \u2022 the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value \u2022 the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value \u2022 the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Author(s) Mariella De Crouy mariella.decrouychanel@uni.lu Context Tags anom_processing Labels package : kiara_plugin.anom_processing References source_repo : https://github.com/DHARPA-Project/kiara_pl\u2026 documentation : https://DHARPA-Project.github.io/kiara_plu\u2026 Operation details Documentation A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` Inputs field name type desc\u2026 Req\u2026 Defa\u2026 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text_ stri\u2026 The yes -- no 1 first defa\u2026 text. -- text_ stri\u2026 The yes -- no 2 seco\u2026 defa\u2026 text. -- Outputs field name type description \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 text string The concatenated text.","title":"anom_processing.example"},{"location":"reference/SUMMARY/","text":"kiara_plugin anom_processing data_types models modules pipelines","title":"SUMMARY"},{"location":"reference/kiara_plugin/anom_processing/__init__/","text":"Top-level package for kiara_plugin.anom_processing. KIARA_METADATA \u00b6 find_data_types : Union [ Type , Tuple , Callable ] \u00b6 find_model_classes : Union [ Type , Tuple , Callable ] \u00b6 find_modules : Union [ Type , Tuple , Callable ] \u00b6 find_pipelines : Union [ Type , Tuple , Callable ] \u00b6 get_version () \u00b6 Source code in anom_processing/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__ Modules \u00b6 data_types \u00b6 This module contains the value type classes that are used in the kiara_plugin.anom_processing package. models \u00b6 This module contains the metadata (and other) models that are used in the kiara_plugin.anom_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes. modules special \u00b6 Classes \u00b6 ExampleModule ( KiaraModule ) \u00b6 A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in anom_processing/modules/__init__.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"anom_processing.example\" def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in anom_processing/modules/__init__.py def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in anom_processing/modules/__init__.py def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in anom_processing/modules/__init__.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. pipelines special \u00b6 Default (empty) module that is used as a base path for pipelines contained in this package.","title":"anom_processing"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.KIARA_METADATA","text":"","title":"KIARA_METADATA"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.find_data_types","text":"","title":"find_data_types"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.find_model_classes","text":"","title":"find_model_classes"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.find_modules","text":"","title":"find_modules"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.find_pipelines","text":"","title":"find_pipelines"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.get_version","text":"Source code in anom_processing/__init__.py def get_version (): from pkg_resources import DistributionNotFound , get_distribution try : # Change here if project is renamed and does not equal the package name dist_name = __name__ __version__ = get_distribution ( dist_name ) . version except DistributionNotFound : try : version_file = os . path . join ( os . path . dirname ( __file__ ), \"version.txt\" ) if os . path . exists ( version_file ): with open ( version_file , encoding = \"utf-8\" ) as vf : __version__ = vf . read () else : __version__ = \"unknown\" except ( Exception ): pass if __version__ is None : __version__ = \"unknown\" return __version__","title":"get_version()"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing-modules","text":"","title":"Modules"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.data_types","text":"This module contains the value type classes that are used in the kiara_plugin.anom_processing package.","title":"data_types"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.models","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.anom_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules","text":"","title":"modules"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in anom_processing/modules/__init__.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"anom_processing.example\" def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"ExampleModule"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules.ExampleModule-classes","text":"_config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Classes"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules.ExampleModule-methods","text":"create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in anom_processing/modules/__init__.py def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in anom_processing/modules/__init__.py def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in anom_processing/modules/__init__.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"Methods"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules.ExampleModuleConfig","text":"Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"ExampleModuleConfig"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.modules.ExampleModuleConfig-attributes","text":"separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Attributes"},{"location":"reference/kiara_plugin/anom_processing/__init__/#kiara_plugin.anom_processing.pipelines","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"},{"location":"reference/kiara_plugin/anom_processing/data_types/","text":"This module contains the value type classes that are used in the kiara_plugin.anom_processing package.","title":"data_types"},{"location":"reference/kiara_plugin/anom_processing/models/","text":"This module contains the metadata (and other) models that are used in the kiara_plugin.anom_processing package. Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules. Metadata models must be a sub-class of kiara.metadata.MetadataModel . Other models usually sub-class a pydantic BaseModel or implement custom base classes.","title":"models"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/","text":"Classes \u00b6 ExampleModule ( KiaraModule ) \u00b6 A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in anom_processing/modules/__init__.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"anom_processing.example\" def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) Classes \u00b6 _config_cls ( KiaraModuleConfig ) private pydantic-model \u00b6 Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings. Methods \u00b6 create_inputs_schema ( self ) \u00b6 Return the schema for this types' inputs. Source code in anom_processing/modules/__init__.py def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs create_outputs_schema ( self ) \u00b6 Return the schema for this types' outputs. Source code in anom_processing/modules/__init__.py def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs process ( self , inputs , outputs ) \u00b6 Source code in anom_processing/modules/__init__.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result ) ExampleModuleConfig ( KiaraModuleConfig ) pydantic-model \u00b6 Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" ) Attributes \u00b6 separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"modules"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule","text":"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a KiaraModule : the (optional) configuration class : must inherit from KiaraModuleConfig , and the config class must be set as the _config_cls attribute on the KiaraModule class. Configuration values can be retrieved via the self.get_config_value(key) method the inputs description : must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value the outputs description : must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value the process method : this is where the actual work gets done. Input data can be accessed via inputs.get_value_data(key) , results can be set with the outputs.set_value(key, value) method Examples: This example module can be tested on the commandline with the kiara run command: kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" Source code in anom_processing/modules/__init__.py class ExampleModule ( KiaraModule ): \"\"\"A very simple example module; concatenate two strings. The purpose of this modules is to show the main elements of a [`KiaraModule`][kiara.modules.KiaraModule]: - ***the (optional) configuration class***: must inherit from [`KiaraModuleConfig`][kiara.modules.KiaraModuleConfig], and the config class must be set as the `_config_cls` attribute on the `KiaraModule` class. Configuration values can be retrieved via the [`self.get_config_value(key)`][kiara.modules.KiaraModule.get_config_value] method - ***the inputs description***: must return a dictionary, containing the input name(s) as keys, and another dictionary containing type_name information and documentation about the input data as value - ***the outputs description***: must return a dictionary, containing the output name(s) as keys, and another dictionary containing type_name information and documentation about the output data as value - ***the ``process`` method***: this is where the actual work gets done. Input data can be accessed via ``inputs.get_value_data(key)``, results can be set with the ``outputs.set_value(key, value)`` method Example: This example module can be tested on the commandline with the ``kiara run`` command: ``` kiara run core_types.example text_1=\"xxx\" text_2=\"yyy\" ``` \"\"\" _config_cls = ExampleModuleConfig _module_type_name = \"anom_processing.example\" def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"ExampleModule"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule-classes","text":"","title":"Classes"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule._config_cls","text":"Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"_config_cls"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule._config_cls-attributes","text":"separator : str pydantic-field \u00b6 The seperator between the two strings.","title":"Attributes"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule-methods","text":"","title":"Methods"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule.create_inputs_schema","text":"Return the schema for this types' inputs. Source code in anom_processing/modules/__init__.py def create_inputs_schema ( self , ) -> ValueMapSchema : inputs = { \"text_1\" : { \"type\" : \"string\" , \"doc\" : \"The first text.\" }, \"text_2\" : { \"type\" : \"string\" , \"doc\" : \"The second text.\" }, } return inputs","title":"create_inputs_schema()"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule.create_outputs_schema","text":"Return the schema for this types' outputs. Source code in anom_processing/modules/__init__.py def create_outputs_schema ( self , ) -> ValueMapSchema : outputs = { \"text\" : { \"type\" : \"string\" , \"doc\" : \"The concatenated text.\" , } } return outputs","title":"create_outputs_schema()"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModule.process","text":"Source code in anom_processing/modules/__init__.py def process ( self , inputs : ValueMap , outputs : ValueMap ) -> None : separator = self . get_config_value ( \"separator\" ) text_1 = inputs . get_value_data ( \"text_1\" ) text_2 = inputs . get_value_data ( \"text_2\" ) result = text_1 + separator + text_2 outputs . set_value ( \"text\" , result )","title":"process()"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModuleConfig","text":"Source code in anom_processing/modules/__init__.py class ExampleModuleConfig ( KiaraModuleConfig ): separator : str = Field ( description = \"The seperator between the two strings.\" , default = \" - \" )","title":"ExampleModuleConfig"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModuleConfig-attributes","text":"","title":"Attributes"},{"location":"reference/kiara_plugin/anom_processing/modules/__init__/#kiara_plugin.anom_processing.modules.ExampleModuleConfig.separator","text":"The seperator between the two strings.","title":"separator"},{"location":"reference/kiara_plugin/anom_processing/pipelines/__init__/","text":"Default (empty) module that is used as a base path for pipelines contained in this package.","title":"pipelines"}]}